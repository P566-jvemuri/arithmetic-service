name: Docker Image CI for GHCR and ACR

on:
  push:
    branches:
      - main  # Or your designated branch

jobs:
  build_and_publish:
    runs-on: ubuntu-latest
    env:
      CONTAINER_REGISTRY_UN: ${{ secrets.AZURE_CONTAINER_REGISTRY_UN }}
      CONTAINER_REGISTRY_PW: ${{ secrets.AZURE_CONTAINER_REGISTRY_PW }}

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      # Step 3: Build the package (skip tests for faster builds)
      - name: Build the package (skip tests)
        run: mvn --batch-mode -DskipTests package

      # Step 4: Run unit tests
      - name: Run Unit Tests
        run: mvn --batch-mode -Dmaven.test.failure.ignore=true test

      # Step 5: Report test results
      - name: Report Test Results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Maven Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: true

      # Step 6: Publish the image to GitHub Container Registry (GHCR)
      - name: Publish Image to GitHub Container Registry (GHCR)
        run: |
          echo "${{ secrets.ACCESS_TOKEN }}" | docker login ghcr.io -u jahnavi-vemuri --password-stdin
          docker build -t ghcr.io/jahnavi-vemuri/arithmetic-service:latest --file Dockerfile .
          docker push ghcr.io/jahnavi-vemuri/arithmetic-service:latest

      # Step 7: Publish the image to Azure Container Registry (ACR)
      - name: Publish Image to Azure Container Registry (ACR)
        run: |
          echo "$AZURE_CONTAINER_REGISTRY_PW" | docker login p566spring2025.azurecr.io -u $AZURE_CONTAINER_REGISTRY_UN --password-stdin
          docker tag ghcr.io/jahnavi-vemuri/arithmetic-service:latest p566spring2025.azurecr.io/arithmetic-service:latest
          docker push p566spring2025.azurecr.io/arithmetic-service:latest

      # Step 8: Configure kubectl
      - name: Configure kubectl
        uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG }}

      # Step 9: Deploy to Kubernetes
      - name: Deploy to Kubernetes
        run: ./deploy.sh
